name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run unit tests with coverage
      run: npm run test -- --coverage --watchAll=false
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Build the application
      run: npm run build
      
    - name: Start the application
      run: npm start &
      env:
        PORT: 3000
        
    - name: Wait for application to be ready
      run: npx wait-on http://localhost:3000
      
    - name: Run E2E tests
      run: npx playwright test
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  build:
    runs-on: ubuntu-latest
    needs: [lint-and-test, e2e-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: .next/
        retention-days: 30

  quality-gates:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm run test -- --coverage --watchAll=false
      
    - name: Check coverage thresholds
      run: |
        # Check if coverage meets minimum thresholds
        COVERAGE=$(npm run test -- --coverage --watchAll=false --json | jq -r '.coverageSummary.total.statements.pct')
        if (( $(echo "$COVERAGE < 50" | bc -l) )); then
          echo "❌ Coverage threshold not met: $COVERAGE% (minimum: 50%)"
          exit 1
        else
          echo "✅ Coverage threshold met: $COVERAGE%"
        fi

  performance-desktop:
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build the application
      run: npm run build
      
    - name: Start the application
      run: npm start &
      env:
        PORT: 3000
        
    - name: Wait for application to be ready
      run: npx wait-on http://localhost:3000
      
    - name: Install Lighthouse
      run: npm install -g lighthouse
      
    - name: Run Lighthouse Desktop Audit
      run: lighthouse http://localhost:3000 --preset=desktop --output=json --output-path=./lighthouse-desktop-report.json
      
    - name: Upload Lighthouse Report
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-desktop-report
        path: lighthouse-desktop-report.json
        retention-days: 30
        
    - name: Check Performance Score
      run: |
        # Check if performance score meets minimum threshold
        PERFORMANCE_SCORE=$(cat lighthouse-desktop-report.json | jq -r '.categories.performance.score * 100')
        if (( $(echo "$PERFORMANCE_SCORE < 80" | bc -l) )); then
          echo "❌ Performance score below threshold: $PERFORMANCE_SCORE% (minimum: 80%)"
          exit 1
        else
          echo "✅ Performance score meets threshold: $PERFORMANCE_SCORE%"
        fi 